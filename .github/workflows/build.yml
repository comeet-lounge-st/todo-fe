# Sample workflow for building and deploying a Next.js site to GitHub Pages
#
# To get started with Next.js see: https://nextjs.org/docs/getting-started
#
name: NextJs build

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ['main']

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  NEXTAUTH_SECRET: ${{ secrets.NEXTAUTH_SECRET }}
  NEXT_PUBLIC_GOOGLE_CLIENT_SECRET: ${{ secrets.NEXT_PUBLIC_GOOGLE_CLIENT_SECRET }}
  NEXT_PUBLIC_MONGODB_URL: ${{ secrets.NEXT_PUBLIC_MONGODB_URL }}

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

jobs:
  # Build job
  build:
    runs-on: [self-hosted]
    container:
      image: node:20
      options: --user root

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Detect package manager
        id: detect-package-manager
        run: |
          echo "manager=pnpm" >> $GITHUB_OUTPUT
          echo "command=install" >> $GITHUB_OUTPUT
          echo "runner=pnpm" >> $GITHUB_OUTPUT
          exit 0

      - name: Setup pnpm
        uses: pnpm/action-setup
        with:
          version: 8

      - name: Restore cache
        uses: actions/cache
        with:
          path: |
            .next/cache
          # Generate a new cache whenever packages or source files change.
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/pnpm-lock.yaml') }}-${{ hashFiles('**.[jt]s', '**.[jt]sx') }}
          # If source files changed but packages didn't, rebuild from a prior cache.
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('**/pnpm-lock.yaml') }}-

      - name: Install dependencies
        run: ${{ steps.detect-package-manager.outputs.manager }} ${{ steps.detect-package-manager.outputs.command }}

      - name: Build with Next.js
        run: ${{ steps.detect-package-manager.outputs.manager }} build

      - name: build info
        run: ls -al .next

      - name: Archive artifacts upload
        uses: actions/upload-artifact@v4
        with:
          name: next-standalone
          path: .next/standalone # 빌드된 파일들이 있는 디렉토리를 지정

      - name: Dockerfile upload
        uses: actions/upload-artifact@v4
        with:
          name: Dockerfile
          path: Dockerfile

  docker-image:
    needs: build
    runs-on: [self-hosted]
    permissions:
      contents: read
      packages: write
    steps:
      - name: Archive artifacts download
        uses: actions/download-artifact@v4
        with:
          name: next-standalone
          path: /home/todo/actions-runner/_work/_temp/todo-fe/standalone

      - name: Dockerfile download
        uses: actions/download-artifact@v4
        with:
          name: Dockerfile
          path: /home/todo/actions-runner/_work/_temp/todo-fe/Dockerfile

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ github.token}}

      - name: Added environment variable for version.
        id: version
        run: |
          echo "GIT_SHORT_COMMIT_ID=$(git rev-parse —short HEAD)" >> $GITHUB_OUTPUT
          echo "BUILD_TIME=$(date +'%Y-%m-%d_%H:%M')" >> $GITHUB_OUTPUT

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: /home/todo/actions-runner/_work/_temp/todo-fe
          file: Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: todo
          port: 30022
          key: ${{ secrets.PRIVATE_KEY }}
          envs: GITHUB_SHA
          script: |
            docker ps
            docker pull ghcr.io/${{ github.repository }}:main
            docker run -d -p 8082:8082 ghcr.io/${{ github.repository }}:main
            docker image prune -f
